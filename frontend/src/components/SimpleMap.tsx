  'use client'

  import { useEffect, useRef } from 'react'
  import { load } from '@2gis/mapgl'
  import { Directions } from '@2gis/mapgl-directions'



  export default function SimpleMap() {
    const mapRef = useRef<HTMLDivElement>(null)
  const markersRef = useRef<Map<number, any>>(new Map())
  const busMarkerRef = useRef<any>(null)
  const wsRef = useRef<WebSocket | null>(null)
  const lastCountRef = useRef<number | null>(null)
  const mapInstanceRef = useRef<any>(null)
  const currentIconRef = useRef<'default' | 'green' | 'yellow' | 'red'>('default')
  const trailingMarkerRef = useRef<any>(null)

  // –ü—É—Ç–∏ –¥–æ –∏–∫–æ–Ω–æ–∫ –º–∞—Ä–∫–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ URL, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å /undefined)
  const ICONS = {
    default: 'https://docs.2gis.com/img/mapgl/marker.svg',
    green: (typeof window !== 'undefined' ? window.location.origin : '') + '/icons/green.svg',
    yellow: (typeof window !== 'undefined' ? window.location.origin : '') + '/icons/yellow.svg',
    red: (typeof window !== 'undefined' ? window.location.origin : '') + '/icons/red.svg',
  } as const

  // –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ –º–∞—Ä–∫–µ—Ä–∞ (–≤ –ø–∏–∫—Å–µ–ª—è—Ö)
  const MARKER_SIZE: [number, number] = [32, 32]

  // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–∏–≥–∞ –∏ 404 undefined
  const preloadIcons = () => {
    try {
      ;[ICONS.default, ICONS.green, ICONS.yellow, ICONS.red].forEach((url) => {
        const img = new Image()
        img.src = url
      })
    } catch {}
  }

  const applyLatestCountIfReady = () => {
    const count = lastCountRef.current
    if (count == null) return
    updateMarkerAppearance(count)
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∏ –∏–∫–æ–Ω–∫–∏ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Å—á—ë—Ç—á–∏–∫–∞
  const updateMarkerAppearance = (count: number) => {
    const marker: any = busMarkerRef.current || markersRef.current.get(0)
    if (!marker) return
    // marker.setLabel({ text: `${count} —á–µ–ª.`, offset: [0, -10], color: '#111' }) // —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π

    let nextIconKey: 'green' | 'yellow' | 'red' = 'green'
    if (count === 1) nextIconKey = 'yellow'
    else if (count >= 2) nextIconKey = 'red'

    if (currentIconRef.current !== nextIconKey) {
      const url = ICONS[nextIconKey]
      if (url && typeof marker.setIcon === 'function') {
        marker.setIcon({ icon: url, size: MARKER_SIZE } as any)
        currentIconRef.current = nextIconKey
      }
    }
  }

    useEffect(() => {
      if (!mapRef.current) return

      console.log('üß™ –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞: –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...')
      
      let cancelled = false
      load().then((mapglAPI) => {
        if (cancelled || !mapRef.current) return
        console.log('‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞: API –∑–∞–≥—Ä—É–∂–µ–Ω')
        
        const map = new mapglAPI.Map(mapRef.current!, {
          center: [37.6208, 55.7539], // —Ü–µ–Ω—Ç—Ä –ú–æ—Å–∫–≤—ã
          zoom: 13,
          key: '39d1fbf7-ca4d-4871-9f90-c3f3698ef3dc',
        })
        mapInstanceRef.current = map
        
        console.log('‚úÖ –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞: —Å–æ–∑–¥–∞–Ω–∞', map)
        
        map.on('styleload', () => {
          console.log('üéâ –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')

          // –ú–∞—Ä—à—Ä—É—Ç –∞–≤—Ç–æ–±—É—Å–∞ (–º–∞—Å—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç [lng, lat])
          const route: [number, number][] = [
            [37.62372, 55.74965],
            [37.611929, 55.747856], //37.611929, 55.747856
         //   [37.61189, 55.74826],
         //   [37.61097, 55.74889],
            [37.6095, 55.74937],
            [37.60972, 55.75055],
            [37.61114, 55.75259],
            [37.61448, 55.75655],
            [37.6178, 55.75844],
            [37.62453, 55.75953],
            [37.62576, 55.7595],
            [37.62696, 55.75872],
            [37.63023, 55.7566],
            [37.63334, 55.75432],
            [37.63228, 55.7498],
            [37.62812, 55.74995],
            [37.62372, 55.74965], // –ú–∞—Ä—à—Ä—É—Ç –∑–∞–º—ã–∫–∞–µ—Ç—Å—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–æ–π
        ];

        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏–º –∏–∫–æ–Ω–∫–∏ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
        preloadIcons()

        const marker = new mapglAPI.Marker(map, {
          coordinates: [37.62372, 55.74965],
          // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º 0 ‚Üí –∑–µ–ª—ë–Ω—ã–π
          icon: ICONS.green,
          size: MARKER_SIZE,
          // —Å—Ç–∞—Ä—Ç—É–µ–º –±–µ–∑ "–ø–æ–ª–æ—Å–∫–∏"
          // label: { text: `${0} —á–µ–ª.`, offset: [0, -10], color: '#111' } // —Å–∫—Ä—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π
        });
        // –ó–µ–ª—ë–Ω—ã–π —Ö–≤–æ—Å—Ç–æ–≤–æ–π –º–∞—Ä–∫–µ—Ä, –µ–¥–µ—Ç –ø–æ–∑–∞–¥–∏ –±–µ–∑ –ª–µ–π–±–ª–æ–≤
        const trailingMarker = new mapglAPI.Marker(map, {
          coordinates: [37.62372, 55.74965],
          icon: ICONS.green,
          size: MARKER_SIZE,
        })
        trailingMarkerRef.current = trailingMarker
        // –†–∏—Å—É–µ–º –º–∞—Ä—à—Ä—É—Ç —Ü–≤–µ—Ç–Ω–æ–π –ª–∏–Ω–∏–µ–π
        const routeLine = new mapglAPI.Polyline(map, {
          coordinates: route,
          color: '#1976d2',
          width: 6,
          opacity: 0.9
        } as any)
        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä –∞–≤—Ç–æ–±—É—Å–∞ —Å id 0 –∏ –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É
        markersRef.current.set(0, marker)
        busMarkerRef.current = marker
        // –µ—Å–ª–∏ —É–∂–µ –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ WS ‚Äî –ø—Ä–∏–º–µ–Ω–∏–º –∏—Ö —Å—Ä–∞–∑—É
        applyLatestCountIfReady()
      // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏

  //     const directions = new Directions(map, {
  //       directionsApiKey: '–ö–ª—é—á –¥–ª—è Directions API',
  //   });
  //   directions.carRoute({
  //     points: [
  //         [55.27887, 25.21001],
  //         [55.30771, 25.20314],
  //     ],
  // });

function interpolateCoordinates(
  coord1: [number, number],
  coord2: [number, number],
  t: number
): [number, number] {
  return [
    coord1[0] + (coord2[0] - coord1[0]) * t,
    coord1[1] + (coord2[1] - coord1[1]) * t
  ]
}

function animateTravel(
  marker: any,
  route: [number, number][],
  durationPerSegment: number,
  perSegmentDuration?: (segmentIndex: number) => number
) {
  let segmentIndex = 0;
  

  function animateSegment(startTime: number) {
      const elapsedTime = performance.now() - startTime;
      const currentDuration = perSegmentDuration ? perSegmentDuration(segmentIndex) : durationPerSegment;
      const t = elapsedTime / currentDuration; // –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞

      if (t < 1) {
          // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
          const newCoords: [number, number] = interpolateCoordinates(
              route[segmentIndex],
              route[segmentIndex + 1],
              t,
          );
          marker.setCoordinates(newCoords);

          // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
          requestAnimationFrame(() => animateSegment(startTime));
      } else {
          // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ–≥–º–µ–Ω—Ç—É
          segmentIndex++;
          if (segmentIndex < route.length - 1) {
              animateSegment(performance.now());
          } else {
              // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
              segmentIndex = 0;
              animateSegment(performance.now());
          }
      }
  }

  // –ù–∞—á–∞–ª–æ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
  if (route.length > 1) {
      animateSegment(performance.now());
  }
}

// –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
const BASE_SEGMENT_DURATION_MS = 20000;
const getSegmentDuration = (idx: number) => {
  // –£—Å–∫–æ—Ä—è–µ–º —É—á–∞—Å—Ç–æ–∫ –º–µ–∂–¥—É 2-–π –∏ 3-–π —Ç–æ—á–∫–∞–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–∏–Ω–¥–µ–∫—Å —Å–µ–≥–º–µ–Ω—Ç–∞ 1)
  if (idx === 1) return Math.max(3000, Math.floor(BASE_SEGMENT_DURATION_MS / 3));
  return BASE_SEGMENT_DURATION_MS;
};
animateTravel(marker, route, BASE_SEGMENT_DURATION_MS, getSegmentDuration);

// –•–≤–æ—Å—Ç–æ–≤–æ–π –º–∞—Ä–∫–µ—Ä —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –±—ã—Ç—å "—Å–∑–∞–¥–∏"
const TRAILING_DELAY_MS = 7000; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–∑–∞–¥–µ—Ä–∂–∫—É) —Ö–≤–æ—Å—Ç–∞
setTimeout(() => {
  try {
    if (trailingMarkerRef.current) {
      animateTravel(trailingMarkerRef.current, route, BASE_SEGMENT_DURATION_MS, getSegmentDuration)
    }
  } catch {}
}, TRAILING_DELAY_MS);


          map.setCenter(route[0])
          map.setZoom(14)
        })
        
        map.on('error', (err: any) => {
          console.error('‚ùå –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞: –æ—à–∏–±–∫–∞', err)
        })
        
      }).catch((err: any) => {
        console.error('‚ùå –ü—Ä–æ—Å—Ç–∞—è –∫–∞—Ä—Ç–∞: –æ—à–∏–±–∫–∞ API', err)
      })

      // –ß–∏—Å—Ç–∫–∞: —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, —á—Ç–æ–±—ã –≤ dev –Ω–µ –ø–ª–æ–¥–∏–ª–∏—Å—å –∏–Ω—Å—Ç–∞–Ω—Å—ã
      return () => {
        cancelled = true
        try {
          if (mapInstanceRef.current) {
            mapInstanceRef.current.destroy()
            mapInstanceRef.current = null
          }
        } catch {}
      }
    }, [])

  // WebSocket: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –º–∞—Ä–∫–µ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–≤–Ω–µ –∫–æ–ª–±—ç–∫–æ–≤)
  useEffect(() => {
    const ws = new WebSocket('ws://192.168.195.57:8000/ws/aaa')
    wsRef.current = ws
    ws.onopen = () => {
      console.log('WebSocket connected')
    }
    ws.onmessage = (e) => {
      let nextCount: number | null = null
      try {
        const parsed = JSON.parse(e.data)
        console.log(parsed)
        if (parsed && typeof parsed.count === 'number') {
          nextCount = parsed.count
        }
      } catch (err) {
        const n = Number(e.data)
        if (!Number.isNaN(n)) nextCount = n
      }

      if (nextCount != null) {
        lastCountRef.current = nextCount
        applyLatestCountIfReady()
        // –û–±–Ω–æ–≤–∏–º –∏–∫–æ–Ω–∫—É/–ª–µ–π–±–ª —Å—Ä–∞–∑—É
        updateMarkerAppearance(nextCount)
      }
    }
    ws.onclose = () => {
      console.log('WebSocket closed')
    }
    return () => {
      try { ws.close() } catch {}
      wsRef.current = null
    }
  }, [])

    return (
      <div className="w-full h-full">
        <div 
          ref={mapRef}
          className="w-full h-full"
          style={{ 
            width: '100%', 
            height: '100%'
          }}
        />
      </div>
    )
  }
